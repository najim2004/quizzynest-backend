// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  USER
  ADMIN
  MODERATOR
}

enum AchievementType {
  QUIZ_MASTER
  HIGH_SCORER
  STREAK_KEEPER
  FAST_SOLVER
  PERFECT_SCORE
}

enum VoucherStatus {
  ACTIVE
  USED
  EXPIRED
}

enum Difficulty {
  EASY
  MEDIUM
  HARD
}

enum SessionStatus {
  IN_PROGRESS
  COMPLETED
  ABANDONED
}

// 1. User
model User {
  id          Int       @id @default(autoincrement())
  fullName    String
  email       String    @unique
  password    String
  role        Role      @default(USER)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  lastLoginAt DateTime  @default(now())
  isDeleted   Boolean   @default(false) // Soft delete flag
  deletedAt   DateTime? // Timestamp for soft deletion

  // Relations
  profile               UserProfile?
  quizResults           QuizResult[]
  achievements          Achievement[]
  vouchers              UserVoucher[]
  categories            Category[]
  quizzes               Quiz[]
  answers               UserQuestionAnswer[]
  quizSessions          QuizSession[]
  QuizGenerationSession QuizGenerationSession[]

  @@index([email])
  @@index([role])
  @@index([lastLoginAt])
  @@index([createdAt])
  @@index([isDeleted])
  @@map("users")
}

// 2. UserProfile
model UserProfile {
  id         Int     @id @default(autoincrement())
  userId     Int     @unique
  profilePic String?
  bio        String? @db.Text

  user User @relation(fields: [userId], references: [id], onDelete: Cascade) // প্রতিটি প্রোফাইল একজন ইউজারের সাথে সম্পর্কিত

  @@index([userId])
  @@map("user_profiles")
}

// 3. Category
model Category {
  id          Int       @id @default(autoincrement())
  name        String    @unique
  description String?   @db.Text
  createdBy   Int
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  color       String?   @default("#FFFFFF") // ক্যাটাগরির জন্য একটি রঙ
  icon        String?   @default("https://www.svgrepo.com/show/445599/category.svg") // ক্যাটাগরির জন্য একটি আইকন
  iconId      String?
  isDeleted   Boolean   @default(false) // Soft delete flag
  deletedAt   DateTime? // Timestamp for soft deletion

  creator User   @relation(fields: [createdBy], references: [id]) // কোন ইউজার এই ক্যাটাগরি তৈরি করেছে
  quizzes Quiz[] // এই ক্যাটাগরিতে কতগুলো কুইজ আছে

  @@index([createdBy])
  @@index([createdAt])
  @@index([name])
  @@index([isDeleted])
  @@map("categories")
}

// 4. Quiz
model Quiz {
  id          Int        @id @default(autoincrement())
  question    String
  timeLimit   Int        @default(20) // সেকেন্ডে
  maxPrize    Int        @default(0) // New field for max price
  description String?    @db.Text
  difficulty  Difficulty
  categoryId  Int
  createdBy   Int
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  isDeleted   Boolean    @default(false) // Soft delete flag
  deletedAt   DateTime? // Timestamp for soft deletion

  category                Category               @relation(fields: [categoryId], references: [id]) // কোন ক্যাটাগরির কুইজ
  creator                 User                   @relation(fields: [createdBy], references: [id]) // কে এই কুইজ তৈরি করেছে
  answers                 Answer[] // এই কুইজের সম্ভাব্য উত্তরগুলো
  userAnswers             UserQuestionAnswer[] // ইউজারদের দেওয়া উত্তরগুলো
  QuizGenerationSession   QuizGenerationSession? @relation(fields: [quizGenerationSessionId], references: [id])
  quizGenerationSessionId Int?

  @@index([categoryId])
  @@index([createdBy])
  @@index([difficulty])
  @@index([createdAt])
  @@index([isDeleted])
  @@map("quizzes")
}

// 5. Answer
model Answer {
  id        Int       @id @default(autoincrement())
  text      String    @db.Text
  isCorrect Boolean
  label     String? // Answer label (A, B, C, D)
  quizId    Int
  isDeleted Boolean   @default(false) // Soft delete flag
  deletedAt DateTime? // Timestamp for soft deletion

  quiz        Quiz                 @relation(fields: [quizId], references: [id], onDelete: Cascade) // কোন কুইজের উত্তর
  userAnswers UserQuestionAnswer[] // কোন ইউজাররা এই উত্তরটি বেছে নিয়েছে

  @@index([quizId])
  @@index([quizId, isCorrect])
  @@index([isDeleted])
  @@map("answers")
}

// 6. UserQuestionAnswer
model UserQuestionAnswer {
  id               Int                     @id @default(autoincrement())
  userId           Int
  quizId           Int
  quizResultId     Int? // New field to link with QuizResult
  selectedAnswerId Int?
  answeredAt       DateTime                @default(now())
  sessionId        Int?
  user             User                    @relation(fields: [userId], references: [id], onDelete: Cascade) // কোন ইউজার উত্তর দিয়েছে
  quiz             Quiz                    @relation(fields: [quizId], references: [id]) // কোন কুইজের উত্তর
  selectedAnswer   Answer?                 @relation(fields: [selectedAnswerId], references: [id]) // কোন উত্তরটি সিলেক্ট করা হয়েছে
  quizResult       QuizResult?             @relation(fields: [quizResultId], references: [id]) // কোন কুইজ রেজাল্টের অংশ
  session          QuizSession?            @relation(fields: [sessionId], references: [id])
  metrics          QuestionAttemptMetrics? // এই উত্তরের পারফরম্যান্স মেট্রিক্স

  @@index([userId])
  @@index([quizId])
  @@index([sessionId])
  @@index([answeredAt])
  @@index([quizResultId])
  @@index([userId, quizId])
  @@index([userId, sessionId])
  @@index([userId, quizId, sessionId, answeredAt])
  @@map("user_question_answers")
}

// New model for question attempt metrics
model QuestionAttemptMetrics {
  id           Int      @id @default(autoincrement())
  userAnswerId Int      @unique
  timeTaken    Int // in seconds
  coinsEarned  Int      @default(0)
  isCorrect    Boolean  @default(false)
  createdAt    DateTime @default(now())

  userAnswer UserQuestionAnswer @relation(fields: [userAnswerId], references: [id], onDelete: Cascade) // কোন উত্তরের মেট্রিক্স

  @@index([createdAt])
  @@index([isCorrect])
  @@index([userAnswerId])
  @@map("question_attempt_metrics")
}

// 8. QuizResult
model QuizResult {
  id               Int          @id @default(autoincrement())
  userId           Int
  totalQuestions   Int          @default(0)
  correctAnswers   Int          @default(0)
  totalTimeSpent   Int // Total time spent in seconds
  totalCoinsEarned Int          @default(0)
  accuracy         Float        @default(0) // Percentage of correct answers
  completedAt      DateTime     @default(now())
  session          QuizSession? // কোন সেশন থেকে এই রেজাল্ট তৈরি হয়েছে

  user            User                 @relation(fields: [userId], references: [id], onDelete: Cascade)
  questionResults UserQuestionAnswer[]

  @@index([userId])
  @@index([completedAt])
  @@index([userId, completedAt])
  @@index([accuracy])
  @@map("quiz_results")
}

// 9. Achievement
model Achievement {
  id          Int             @id @default(autoincrement())
  userId      Int
  title       String
  description String?         @db.Text
  type        AchievementType
  earnedAt    DateTime        @default(now())

  user User @relation(fields: [userId], references: [id], onDelete: Cascade) // কোন ইউজার এই অ্যাচিভমেন্ট অর্জন করেছে

  @@index([userId])
  @@index([type])
  @@index([earnedAt])
  @@index([userId, type])
  @@index([userId, earnedAt])
  @@map("achievements")
}

// 10. Voucher
model Voucher {
  id        Int      @id @default(autoincrement())
  name      String
  code      String   @unique
  price     Int
  validity  Json     @default("{\"validFrom\": null, \"validUntil\": null}")
  createdAt DateTime @default(now())

  userVouchers UserVoucher[] // কোন ইউজাররা এই ভাউচার ব্যবহার করেছে

  @@index([code])
  @@index([price])
  @@index([createdAt])
  @@map("vouchers")
}

// 11. UserVoucher
model UserVoucher {
  id         Int           @id @default(autoincrement())
  userId     Int
  voucherId  Int
  status     VoucherStatus @default(ACTIVE)
  timestamps Json          @default("{\"purchasedAt\": null, \"usedAt\": null, \"expiresAt\": null}")
  isDeleted  Boolean       @default(false) // Soft delete flag
  deletedAt  DateTime? // Timestamp for soft deletion

  user    User    @relation(fields: [userId], references: [id], onDelete: Cascade) // কোন ইউজার এই ভাউচার ব্যবহার করেছে
  voucher Voucher @relation(fields: [voucherId], references: [id]) // কোন ভাউচার ব্যবহার করা হয়েছে

  @@index([userId])
  @@index([voucherId])
  @@index([status])
  @@index([isDeleted])
  @@map("user_vouchers")
}

// New QuizSession model
model QuizSession {
  id              Int       @id @default(autoincrement())
  userId          Int
  resultId        Int?      @unique // Add @unique here
  selectedQuizIds Json      @default("[]") // প্রশ্নের আইডিগুলোর অ্যারে, যেমন [1, 2, 3]
  startedAt       DateTime  @default(now())
  completedAt     DateTime? // শেষ না হলে null
  status          String    @default("IN_PROGRESS")
  totalQuestions  Int       @default(0)
  answeredCount   Int       @default(0)

  // Relations
  user            User                 @relation(fields: [userId], references: [id], onDelete: Cascade)
  quizResult      QuizResult?          @relation(fields: [resultId], references: [id])
  questionAnswers UserQuestionAnswer[]

  // Indexes for better query performance
  @@index([userId])
  @@index([startedAt])
  @@index([status])
  @@index([completedAt])
  @@index([userId, status])
  @@index([userId, startedAt])
  @@map("quiz_sessions")
}

// New QuizGenerationSession model
model QuizGenerationSession {
  id            Int      @id @default(autoincrement())
  userId        Int
  totalFiles    Int      @default(0) // Total number of files
  statusMessage String? // Optional status message
  quizzes       Json     @default("[]") // Array of quizzes in JSON format
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  // Relations
  user User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  quiz Quiz[] // Optional relation with Quiz model

  // Indexes for better query performance
  @@index([userId])
  @@index([createdAt])
  @@index([updatedAt])
  @@map("quiz_generation_sessions")
}
